#include "aes128.h"
#include <iostream>
#include <iomanip>

#define THREADS_PER_BLOCK 256

// AES S-box
__constant__ unsigned char sbox[256] = 
{   /*0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/ 
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/ 
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/
};

// AES inverse S-box
__constant__ unsigned char rsbox[256] = 
{   /*0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */
    0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb, /*0*/ 
    0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb, /*1*/
    0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e, /*2*/
    0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25, /*3*/
    0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92, /*4*/
    0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84, /*5*/
    0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06, /*6*/ 
    0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b, /*7*/
    0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73, /*8*/
    0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e, /*9*/
    0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b, /*a*/
    0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4, /*b*/
    0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f, /*c*/
    0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef, /*d*/
    0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61, /*e*/
    0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d  /*f*/
};

// AES round constants
__constant__ unsigned char Rcon[255] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
};

__device__ unsigned char multiply(unsigned char a, unsigned char b) {
    unsigned char p = 0;
    unsigned char hi_bit_set;
    for (int counter = 0; counter < 8; counter++) {
        if ((b & 1) != 0) {
            p ^= a;
        }
        hi_bit_set = (unsigned char) (a & 0x80);
        a <<= 1;
        if (hi_bit_set != 0) {
            a ^= 0x1b;
        }
        b >>= 1;
    }
    return p;
}

__device__ void InverseMixColumns(unsigned char* state) {
    unsigned char temp[16];
    for (int i = 0; i < 4; ++i) {
        int idx = i * 4;
        temp[idx] = multiply(0x0e, state[idx]) ^ multiply(0x0b, state[idx + 1]) ^ multiply(0x0d, state[idx + 2]) ^ multiply(0x09, state[idx + 3]);
        temp[idx + 1] = multiply(0x09, state[idx]) ^ multiply(0x0e, state[idx + 1]) ^ multiply(0x0b, state[idx + 2]) ^ multiply(0x0d, state[idx + 3]);
        temp[idx + 2] = multiply(0x0d, state[idx]) ^ multiply(0x09, state[idx + 1]) ^ multiply(0x0e, state[idx + 2]) ^ multiply(0x0b, state[idx + 3]);
        temp[idx + 3] = multiply(0x0b, state[idx]) ^ multiply(0x0d, state[idx + 1]) ^ multiply(0x09, state[idx + 2]) ^ multiply(0x0e, state[idx + 3]);
    }
    for (int i = 0; i < 16; ++i) {
        state[i] = temp[i];
    }
}

__device__ void AES128_key_expansion(const unsigned char* key, unsigned char* round_keys) {
    unsigned char temp[4];
    int i = 0;

    while (i < 16) {
        round_keys[i] = key[i];
        i++;
    }

    i = 16;
    while (i < 176) {
        for (int j = 0; j < 4; ++j) {
            temp[j] = round_keys[(i - 4) + j];
        }

        if (i % 16 == 0) {
            unsigned char k = temp[0];
            temp[0] = temp[1];
            temp[1] = temp[2];
            temp[2] = temp[3];
            temp[3] = k;

            temp[0] = sbox[temp[0]];
            temp[1] = sbox[temp[1]];
            temp[2] = sbox[temp[2]];
            temp[3] = sbox[temp[3]];

            temp[0] ^= Rcon[i / 16];
        }

        for (int j = 0; j < 4; ++j) {
            round_keys[i] = round_keys[i - 16] ^ temp[j];
            i++;
        }
    }
}

__device__ void AES128_encrypt(const unsigned char* input, unsigned char* output, const unsigned char* round_keys) {
    __shared__ unsigned char state[16];
    for (int i = 0; i < 16; ++i) {
        state[i] = input[i];
    }

    // AddRoundKey
    for (int i = 0; i < 16; ++i) {
        state[i] ^= round_keys[i];
    }

    for (int round = 1; round < 10; ++round) {
        // SubBytes
        for (int i = 0; i < 16; ++i) {
            state[i] = sbox[state[i]];
        }

        // ShiftRows
        unsigned char temp;
        // Rotate first row 1 columns to left
        temp = state[1];
        state[1] = state[5];
        state[5] = state[9];
        state[9] = state[13];
        state[13] = temp;

        // Rotate second row 2 columns to left
        temp = state[2];
        state[2] = state[10];
        state[10] = temp;
        temp = state[6];
        state[6] = state[14];
        state[14] = temp;

        // Rotate third row 3 columns to left
        temp = state[3];
        state[3] = state[15];
        state[15] = state[11];
        state[11] = state[7];
        state[7] = temp;

        // MixColumns
        unsigned char tmp[16];
        for (int i = 0; i < 4; ++i) {
            int idx = i * 4;
            tmp[idx] = multiply(0x02, state[idx]) ^ multiply(0x03, state[idx + 1]) ^ state[idx + 2] ^ state[idx + 3];
            tmp[idx + 1] = state[idx] ^ multiply(0x02, state[idx + 1]) ^ multiply(0x03, state[idx + 2]) ^ state[idx + 3];
            tmp[idx + 2] = state[idx] ^ state[idx + 1] ^ multiply(0x02, state[idx + 2]) ^ multiply(0x03, state[idx + 3]);
            tmp[idx + 3] = multiply(0x03, state[idx]) ^ state[idx + 1] ^ state[idx + 2] ^ multiply(0x02, state[idx + 3]);
        }
        for (int i = 0; i < 16; ++i) {
            state[i] = tmp[i];
        }

        // AddRoundKey
        for (int i = 0; i < 16; ++i) {
            state[i] ^= round_keys[round * 16 + i];
        }
    }

    // Final round (without MixColumns)
    // SubBytes
    for (int i = 0; i < 16; ++i) {
        state[i] = sbox[state[i]];
    }

    // ShiftRows
    unsigned char temp;
    // Rotate first row 1 columns to left
    temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;

    // Rotate second row 2 columns to left
    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;

    // Rotate third row 3 columns to left
    temp = state[3];
    state[3] = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = temp;

    // AddRoundKey
    for (int i = 0; i < 16; ++i) {
        state[i] ^= round_keys[160 + i];
    }

    for (int i = 0; i < 16; ++i) {
        output[i] = state[i];
    }
}

__device__ void AES128_decrypt(const unsigned char* input, unsigned char* output, const unsigned char* round_keys) {
    __shared__ unsigned char state[16];
    for (int i = 0; i < 16; ++i) {
        state[i] = input[i];
    }

    // AddRoundKey(state, round_keys + 160)
    for (int i = 0; i < 16; ++i) {
        state[i] ^= round_keys[160 + i];
    }

    for (int round = 9; round > 0; --round) {
        // InverseShiftRows
        unsigned char temp = state[13];
        state[13] = state[9];
        state[9] = state[5];
        state[5] = state[1];
        state[1] = temp;

        temp = state[14];
        state[14] = state[6];
        state[6] = temp;
        temp = state[10];
        state[10] = state[2];
        state[2] = temp;

        temp = state[3];
        state[3] = state[7];
        state[7] = state[11];
        state[11] = state[15];
        state[15] = temp;

        // InverseSubBytes
        for (int i = 0; i < 16; ++i) {
            state[i] = rsbox[state[i]];
        }

        // AddRoundKey(state, round_keys + round * 16)
        for (int i = 0; i < 16; ++i) {
            state[i] ^= round_keys[round * 16 + i];
        }

        // InverseMixColumns
        InverseMixColumns(state);
    }

    // InverseShiftRows
    unsigned char temp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = temp;

    temp = state[14];
    state[14] = state[6];
    state[6] = temp;
    temp = state[10];
    state[10] = state[2];
    state[2] = temp;

    temp = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = temp;

    // InverseSubBytes
    for (int i = 0; i < 16; ++i) {
        state[i] = rsbox[state[i]];
    }

    // AddRoundKey(state, round_keys)
    for (int i = 0; i < 16; ++i) {
        state[i] ^= round_keys[i];
    }

    for (int i = 0; i < 16; ++i) {
        output[i] = state[i];
    }
}

__device__ void AES128_CBC_encrypt(const unsigned char* plaintext, unsigned char* ciphertext, const unsigned char* key, const unsigned char* iv, int length) {
    unsigned char round_keys[176];
    AES128_key_expansion(key, round_keys);

    unsigned char buffer[16];
    unsigned char current_iv[16];

    for (int i = 0; i < 16; ++i) {
        current_iv[i] = iv[i];
    }

    for (size_t i = 0; i < length; i += 16) {
        for (int j = 0; j < 16; ++j) {
            buffer[j] = plaintext[i + j] ^ current_iv[j];
        }
        AES128_encrypt(buffer, ciphertext + i, round_keys);
        for (int j = 0; j < 16; ++j) {
            current_iv[j] = ciphertext[i + j];
        }
    }
}

__device__ void AES128_CBC_decrypt(const unsigned char* ciphertext, unsigned char* plaintext, const unsigned char* key, const unsigned char* iv, int length) {
    unsigned char round_keys[176];
    AES128_key_expansion(key, round_keys);

    unsigned char buffer[16];
    unsigned char current_iv[16];

    for (int i = 0; i < 16; ++i) {
        current_iv[i] = iv[i];
    }

    for (size_t i = 0; i < length; i += 16) {
        AES128_decrypt(ciphertext + i, buffer, round_keys);
        for (int j = 0; j < 16; ++j) {
            plaintext[i + j] = buffer[j] ^ current_iv[j];
        }
        for (int j = 0; j < 16; ++j) {
            current_iv[j] = ciphertext[i + j];
        }
    }
}

__global__ void run_cbc_encrypt(const unsigned char* plaintext, unsigned char* ciphertext, const unsigned char* key, const unsigned char* iv) {
    AES128_CBC_encrypt(plaintext, ciphertext, key, iv, 16);
}

__global__ void run_cbc_decrypt(const unsigned char* ciphertext, unsigned char* plaintext, const unsigned char* key, const unsigned char* iv) {
    AES128_CBC_decrypt(ciphertext, plaintext, key, iv, 16);
}

void print_array(const std::string& label, const unsigned char* array, int length) {
    std::cout << label << ": ";
    for (int i = 0; i < length; ++i) {
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(array[i]);
    }
    std::cout << std::dec << std::endl;
}
